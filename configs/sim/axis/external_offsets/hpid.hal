loadrt eoffset_pid names=zo
loadrt sum2        names=summer

# Initial PID gain settings
# Notes: (simulation)
#        dgain may be mandatory
#        igain may not useful
setp zo.pgain 30
setp zo.igain  0
setp zo.dgain  0.4

setp zo.k     10000
setp zo.fnum      0

addf zo       servo-thread
addf summer   servo-thread

#-----------------------------------------------------------
# required standard connections TO zo
net E:is-on           <= halui.machine.is-on
net E:is-on           => zo.is-on

net E:active          <= motion.eoffset-active
net E:active          => zo.active

#-----------------------------------------------------------
# required standard connections FROM zo
net E:eoffset-enable  <= zo.enable-out
net E:eoffset-enable  => axis.z.eoffset-enable

net E:clear           <= zo.clear
net E:clear           => axis.z.eoffset-clear

net E:scale           <= zo.kreciprocal
net E:scale           => axis.z.eoffset-scale
 
net E:kcounts         <= zo.kcounts 
net E:kcounts         => axis.z.eoffset-counts

#-----------------------------------------------------------
# provision for a perturbation to pid input command
#   E:perturb         <= (elsewhere, optional)
net E:perturb         => summer.in1

#-----------------------------------------------------------
# zo command  (use M68 to set analog out pin 0)
net E:request         <= motion.analog-out-00
net E:request         => summer.in0

net E:command         <= summer.out
net E:command         => zo.command

#-----------------------------------------------------------
# zo feedback (source elsewhere, mandatory)
net E:feedback        => zo.feedback

#-----------------------------------------------------------
# signals with sink elsewhere

# input to torch height control  (sim:torch_sim.hal)
net E:z-eoffset       <= axis.z.eoffset

# convenience pin, use as required (sim:hpid_panel.hal):
net E:is-off          <= zo.is-off

#-----------------------------------------------------------
# Spindle commands are used for torch
# M3 --> torch on
# M5 --> torch off
net E:torch-enable    <= motion.spindle-on
net E:torch-enable    => zo.enable-in-a

#-----------------------------------------------------------
# extra zo enables (a,b,c are anded together):
setp zo.enable-in-b 1
setp zo.enable-in-c 1

#-----------------------------------------------------------
# signals for halscope usage:
net E:error           <= zo.error
